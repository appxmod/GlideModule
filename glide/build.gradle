apply plugin: 'com.android.library'



tasks.withType(JavaCompile) {
    options.fork = true
}

dependencies {
    api project(':gif_decoder')
    api project(':disklrucache')
    api project(':annotation')
    api project(':annotation:compiler')
    api (libs_viewpager)
    api (libs_fragment)
    api (libs_vectordrawable)
    api (libs_compat)


    //testImplementation "androidx.appcompat:appcompat:auto"
    //testImplementation "junit:junit:${JUNIT_VERSION}"
    //testImplementation "org.mockito:mockito-core:${MOCKITO_VERSION}"
    //testImplementation "org.robolectric:robolectric:${ROBOLECTRIC_VERSION}"
    //testImplementation "com.squareup.okhttp3:mockwebserver:${MOCKWEBSERVER_VERSION}"
    //testImplementation (libs_v4)
}

android {
    compileSdkVersion ver_compileSdkVersion

    defaultConfig {
        minSdkVersion ver_minsdk
        targetSdkVersion ver_aimsdk
        versionName "fff"
        consumerProguardFiles 'proguard-rules.txt'
    }


}

//check.dependsOn(':library:findbugs:findbugs')
//check.dependsOn(':library:pmd:pmd')
//check.dependsOn(':library:test:check')

// Used in pmd and findbugs subprojects.
//@SuppressWarnings("GroovyUnusedDeclaration")
//def classPathForQuality() {
//    return files(
//            android.bootClasspath,
//            project.configurations.compile,
//            project.android.libraryVariants.collect { it.javaCompile.classpath }
//    )
//}

//apply from: "${rootProject.projectDir}/scripts/upload.gradle"

apply plugin: 'maven-publish'
publishing {
    publications {
        maven(MavenPublication) {
            artifact "build\\outputs\\aar\\glide-debug.aar"
            //from components.library
            //println components.properties
            //from components.wtf
            groupId "org.appxmod.glide"
            artifactId "GlideModule"
            version "1.0.0"
        }
    }
}
build.finalizedBy publishToMavenLocal
